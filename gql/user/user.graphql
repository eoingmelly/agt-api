type Query {
  Users: UserCollectionPayload!
  User(id: ID): UserPayload!
}

type Mutation {
  RegisterUser(data: NewUserInput): UserPayload!
  DeleteUsers: String!
  DeleteUser(id: ID!): UserPayload!
  UpdateUser(data: UserUpdateInput, id: ID!): UserPayload
  LoginUser(data: UserLoginInput): SuccessPayload
  ChangePassword(data: UserChangePasswordInput): SuccessPayload
}

type SuccessPayload {
  success: Boolean
  error: String
}

input UserLoginInput {
  email: String
  password: String
}

type User {
  id: ID
  displayName: String!
  email: String!
  description: String
  handicap: Float
  image: String
  societies: [Society]
}

type UserPayload {
  user: User
  error: String
}

type UserCollectionPayload {
  users: [User]
  error: String
}

input NewUserInput {
  displayName: String!
  email: String!
  password: String!
  description: String
  handicap: Float
  societies: [ID]
}

input UserUpdateInput {
  displayName: String!
  description: String
  handicap: Float
  image: String
  societies: [ID]
}

input UserChangePasswordInput {
  newPassword: String!
  confirmPassword: String!
  oldPassword: String!
}
